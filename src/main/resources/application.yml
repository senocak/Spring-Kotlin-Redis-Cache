server:
    port: 8081
spring:
    application:
        name: Spring Kotlin Redis Cache
    datasource:
        url: jdbc:postgresql://${SERVER_IP:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_DB:caching}?currentSchema=${POSTGRESQL_SCHEMA:public}
        username: ${POSTGRESQL_USER:postgres}
        password: ${POSTGRESQL_PASSWORD:senocak}
        hikari:
            minimum-idle: 0 # The minimum connection pool size is 0
            maximum-pool-size: 40 # it can grow to at most 40 connections
            max-lifetime: 900_000 # to retire pooled connections after 10 minutes
            transaction-isolation: TRANSACTION_READ_COMMITTED # to optimize the number of gap locks held by db when traversing the clustered index for bulk updates or deletes.
    liquibase:
        enabled: true
        change-log: classpath:changelog.xml
    jpa:
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
                format_sql: true
                use_sql_comments: true
                highlight_sql: true
                session:
                    events:
                        log:
                            LOG_QUERIES_SLOWER_THAN_MS: ${LOG_QUERIES_SLOWER_THAN_MS:10}
        hibernate:
            ddl-auto: validate
logging:
    level:
        net:
            ttddyy:
                dsproxy:
                    listener: debug
        org:
            hibernate:
                SQL: off
    file:
        name: ./var/logs/app.log
app:
    redis:
        HOST: ${REDIS_HOST:localhost}
        PORT: ${REDIS_PORT:6379}
        PASSWORD: ${REDIS_PASSWORD:senocak}
        TIMEOUT: ${REDIS_TIMEOUT:300}
